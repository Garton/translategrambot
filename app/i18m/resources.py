# app/i18n/resources.py
"""
Runtime i18n strings.  Fallback text is auto-translated and cached.
"""
from typing import Dict

from app.services import translation_service

TEXTS: Dict[str, Dict[str, str]] = {
    "en": {
        # Sent after /start
        "start": (
            "üëã *Hi!* I‚Äôm a *universal translator bot*.\n\n"
            "‚ûä I automatically detect the language you write in.\n"
            "‚ûã I translate it to the *target* language.\n\n"
            "‚û°Ô∏è *How to begin*\n"
            "‚Ä¢ Press **‚ÄúChoose languages‚Äù** below and pick a pair, **or**\n"
            "‚Ä¢ Simply write: `translate to German Hello, friend!`"
        ),
        # "Choose languages" button
        "choose_pair": "üî§ Choose source ‚Üí target language:",
        # Response after choosing a pair
        "pair_chosen": "‚úÖ Great! Now send the text you want to translate.",
        # When detect == None
        "unknown": (
            "ü§î Sorry, I couldn't detect the language.\n"
            "Please send a longer text or specify a target language, e.g. "
            "`translate to English ‚Ä¶`"
        ),
        # Help
        "help": (
            "üìñ *Usage*\n"
            "‚Ä¢ Type a message with `translate to <language>` inside.\n"
            "‚Ä¢ Or press the button below to pick languages.\n\n"
            "*Supported languages*: English, Russian, German, French, "
            "Spanish, Italian, Chinese."
        ),
        # /reset or end of session
        "bye": "üëã Settings cleared. Type /start to begin again.",
    },
    "ru": {
        "start": (
            "üëã *–ü—Ä–∏–≤–µ—Ç!* –Ø *—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫*.\n\n"
            "‚ûä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é —è–∑—ã–∫ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
            "‚ûã –ü–µ—Ä–µ–≤–æ–∂—É –µ–≥–æ –Ω–∞ *—Ü–µ–ª–µ–≤–æ–π* —è–∑—ã–∫.\n\n"
            "‚û°Ô∏è *–ö–∞–∫ –Ω–∞—á–∞—Ç—å*\n"
            "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ **¬´–í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫–∏¬ª** –Ω–∏–∂–µ –∏ –∑–∞–¥–∞–π—Ç–µ –ø–∞—Ä—É, **–∏–ª–∏**\n"
            "‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ: `–ø–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ –Ω–µ–º–µ—Ü–∫–∏–π –ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥!`"
        ),
        "choose_pair": "üî§ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞:",
        "pair_chosen": "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.",
        "unknown": (
            "ü§î –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫.\n"
            "–ü—Ä–∏—à–ª–∏—Ç–µ –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ —è–≤–Ω–æ —É–∫–∞–∂–∏—Ç–µ —è–∑—ã–∫, "
            "–Ω–∞–ø—Ä–∏–º–µ—Ä: `–ø–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π ‚Ä¶`"
        ),
        "help": (
            "üìñ *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è*\n"
            "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ `–ø–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ <—è–∑—ã–∫>`.\n"
            "‚Ä¢ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–æ–≤.\n\n"
            "*–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏*: –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, —Ä—É—Å—Å–∫–∏–π, –Ω–µ–º–µ—Ü–∫–∏–π, "
            "—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π, –∏—Å–ø–∞–Ω—Å–∫–∏–π, –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π, –∫–∏—Ç–∞–π—Å–∫–∏–π."
        ),
        "bye": "üëã –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã. –ù–∞–±–µ—Ä–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
    },
}

DEFAULT_LANG = "en"


async def get_text(lang: str | None, key: str) -> str:
    """
    Return UI string for given language.
    If missing ‚Äî translate from English via TranslationService.
    """
    base = TEXTS.get(lang := (lang or DEFAULT_LANG)[:2])
    if base and key in base:
        return base[key]

    # fallback: translate English text, cache it
    src_text = TEXTS[DEFAULT_LANG][key]
    translated = await translation_service.translate(src_text, DEFAULT_LANG, lang)
    if translated:
        TEXTS.setdefault(lang, {})[key] = translated
        return translated

    # last resort ‚Äî English
    return src_text
